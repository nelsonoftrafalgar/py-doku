{"version":3,"sources":["model.ts","state/context.ts","containers/Hints.tsx","containers/Instructions.tsx","containers/Reset.tsx","grid/Row.tsx","grid/Col.tsx","components/Cell.tsx","containers/Sector.tsx","containers/SelectLevel.tsx","services/Sectors.ts","containers/Game.tsx","helpers/deepCopy.ts","services/Generator.ts","helpers/getCoordsFromItem.ts","services/Mechanics.ts","state/reducers.ts","containers/GlobalState.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","GameContext","React","createContext","Container","styled","div","SwitchWrapper","Switch","button","Text","span","Display","HintsStatus","color","Hints","useContext","dispatch","showHints","hints","data-testid","onClick","type","TOGGLE_HINTS","join","Title","h1","p","Instructions","Reset","RESET_GAME","Style","direction","mt","pb","expand","Row","children","size","Col","CELL_COLORS","1","2","3","4","5","6","7","8","9","background","Cell","value","id","useState","number","setNumber","initialRender","useRef","useEffect","current","UPDATE_BOARD","payload","onWheel","e","deltaY","onMouseEnter","ANALYZE_BOARD","onMouseLeave","CLEAR_HINTS","Sector","values","keys","renderCells","map","i","slice","SelectWrapper","Button","Select","select","Error","SelectLevel","isFetchingBoard","error","level","setLevel","onChange","currentTarget","disabled","SET_LEVEL","sectors","getSectorItemCoords","y","x","split","el","getSectorById","find","sector","includes","getSectorIndex","indexOf","Game","data","renderSectors","length","deepCopy","arr","sub","mapBoradToSectors","board","copy","forEach","row","_","ver","hor","getCoordsFromItem","item","analyzeBoard","cache","mapedBoard","currentSectorIndex","col","rowValue","colValue","push","test","filter","toString","updateBoard","updatedBoard","reducer","state","action","SET_BOARD","initialState","SET_ERROR","GlobalState","render","useReducer","axios","get","params","then","res","catch","contextValue","initilalBoard","useMemo","Provider","StyleReset","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5e46267d.chunk.js","sourcesContent":["export type GameBoard = (string | null)[][]\r\nexport type SectorValues = (number | null)[]\r\n\r\nexport interface IGameContext {\r\n\tshowHints: boolean\r\n\thints: number[]\r\n\tdispatch: React.Dispatch<Action>\r\n\tisFetchingBoard: boolean\r\n\terror: string | null\r\n}\r\n\r\nexport interface IState {\r\n\tlevel: string | null\r\n\tboard: GameBoard\r\n\tshowHints: boolean\r\n\thints: number[]\r\n\tisFetchingBoard: boolean\r\n\terror: string | null\r\n}\r\n\r\nexport enum ActionType {\r\n\tTOGGLE_HINTS = 'TOGGLE_HINTS',\r\n\tUPDATE_BOARD = 'UPDATE_BOARD',\r\n\tANALYZE_BOARD = 'ANALYZE_BOARD',\r\n\tCLEAR_HINTS = 'CLEAR_HINTS',\r\n\tSET_LEVEL = 'SET_LEVEL',\r\n\tSET_BOARD = 'SET_BOARD',\r\n\tRESET_GAME = 'RESET_GAME',\r\n\tSET_ERROR = 'SET_ERROR',\r\n}\r\n\r\nexport type Action =\r\n\t| {\r\n\t\t\ttype: ActionType.UPDATE_BOARD\r\n\t\t\tpayload: { id: string; value: number }\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.TOGGLE_HINTS\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.ANALYZE_BOARD\r\n\t\t\tpayload: { id: string }\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.CLEAR_HINTS\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.SET_LEVEL\r\n\t\t\tpayload: { level: string }\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.SET_BOARD\r\n\t\t\tpayload: { data: GameBoard }\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.RESET_GAME\r\n\t  }\r\n\t| {\r\n\t\t\ttype: ActionType.SET_ERROR\r\n\t\t\tpayload: { error: string }\r\n\t  }\r\n","import { IGameContext } from '../model'\r\nimport React from 'react'\r\n\r\nexport const GameContext = React.createContext({} as IGameContext)","import { ActionType } from '../model'\r\nimport { GameContext } from '../state/context'\r\nimport styled from 'styled-components'\r\nimport { useContext } from 'react'\r\n\r\nconst Container = styled.div`\r\n\twidth: 200px;\r\n\theight: 100px;\r\n`\r\n\r\nconst SwitchWrapper = styled.div`\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tjustify-content: space-around;\r\n`\r\n\r\nconst Switch = styled.button`\r\n\tcursor: pointer;\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid #9e9e9e;\r\n\tfont-family: sans-serif;\r\n\tpadding: 15px;\r\n\tcolor: #9e9e9e;\r\n`\r\n\r\nconst Text = styled.span`\r\n\tfont-family: sans-serif;\r\n\tcolor: #9e9e9e;\r\n`\r\n\r\nconst Display = styled(Text)`\r\n\tdisplay: block;\r\n\tmargin-top: 10px;\r\n\ttext-align: center;\r\n`\r\n\r\nconst HintsStatus = styled.span<{ color: string }>`\r\n\tfont-weight: 600;\r\n\t${({ color }) => `color: ${color}`}\r\n`\r\n\r\nconst Hints = () => {\r\n\tconst { dispatch, showHints, hints } = useContext(GameContext)\r\n\tconst handleSwitch = () => {\r\n\t\tdispatch({ type: ActionType.TOGGLE_HINTS })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<SwitchWrapper>\r\n\t\t\t\t<Switch data-testid='HINTS_SWITCH' onClick={handleSwitch}>\r\n\t\t\t\t\tShow hints:{' '}\r\n\t\t\t\t\t<HintsStatus color={showHints ? 'green' : 'red'}>{showHints ? 'on' : 'off'}</HintsStatus>\r\n\t\t\t\t</Switch>\r\n\t\t\t</SwitchWrapper>\r\n\t\t\t<Display>{hints.join(' ')}</Display>\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default Hints\r\n","import styled from 'styled-components'\r\n\r\nconst Title = styled.h1`\r\n\tfont-family: sans-serif;\r\n\tcolor: #9e9e9e;\r\n\tmargin-bottom: 15px;\r\n`\r\n\r\nconst Text = styled.p`\r\n\tfont-family: sans-serif;\r\n\tcolor: #9e9e9e;\r\n\tmargin-bottom: 10px;\r\n`\r\n\r\nconst Instructions = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Title>Instructions</Title>\r\n\t\t\t<Text>Hover over cell and scroll to change number</Text>\r\n\t\t\t<Text>Click button and hover over cell to view hints</Text>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Instructions\r\n","import { ActionType } from '../model'\r\nimport { GameContext } from '../state/context'\r\nimport styled from 'styled-components'\r\nimport { useContext } from 'react'\r\n\r\nconst Switch = styled.button`\r\n\tcursor: pointer;\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid #9e9e9e;\r\n\tfont-family: sans-serif;\r\n\tpadding: 15px;\r\n\tcolor: #9e9e9e;\r\n\tmargin-top: 40px;\r\n`\r\n\r\nconst Reset = () => {\r\n\tconst { dispatch } = useContext(GameContext)\r\n\treturn <Switch onClick={() => dispatch({ type: ActionType.RESET_GAME })}>Reset game</Switch>\r\n}\r\n\r\nexport default Reset\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface IRowStyle {\r\n\tdirection: string\r\n\tmt: string\r\n\tpb: string\r\n\texpand: boolean\r\n}\r\n\r\ninterface IRowProps {\r\n\tdirection?: string\r\n\tmt?: string\r\n\tpb?: string\r\n\texpand?: boolean\r\n}\r\n\r\nconst Style = styled('div')<IRowStyle>`\r\n\tmax-width: 100%;\r\n\tdisplay: flex;\r\n\t${({ direction }) => `flex-direction: ${direction};`}\r\n\t${({ mt }) => `margin-top: ${mt}px;`}\r\n  ${({ pb }) => `padding-bottom: ${pb}px;`}\r\n  ${({ expand }) => `flex-grow: ${expand ? 1 : 0};`}\r\n`\r\n\r\nconst Row: React.FC<IRowProps> = ({\r\n\tchildren,\r\n\tmt = '0',\r\n\tpb = '0',\r\n\tdirection = 'row',\r\n\texpand = false,\r\n}) => {\r\n\treturn (\r\n\t\t<Style direction={direction} mt={mt} expand={expand} pb={pb}>\r\n\t\t\t{children}\r\n\t\t</Style>\r\n\t)\r\n}\r\n\r\nexport { Row }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ntype ColSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12\r\n\r\ninterface IColStyle {\r\n\tsize: number\r\n}\r\n\r\ninterface IColProps {\r\n\tsize: ColSize\r\n}\r\n\r\nconst Style = styled('div')<IColStyle>`\r\n\t${({ size }) => `width: calc(${size} / 12 * 100%);`}\r\n`\r\n\r\nconst Col: React.FC<IColProps> = ({ children, size }) => {\r\n\treturn <Style size={size}>{children}</Style>\r\n}\r\n\r\nexport { Col }\r\n","import React, { useContext, useEffect, useRef, useState } from 'react'\r\n\r\nimport { ActionType } from '../model'\r\nimport { GameContext } from '../state/context'\r\nimport styled from 'styled-components'\r\n\r\ninterface IProps {\r\n\tvalue: number | null\r\n\tid: string\r\n}\r\n\r\nconst CELL_COLORS: Record<number, string> = {\r\n\t1: '#65b96e',\r\n\t2: '#599dbc',\r\n\t3: '#e69448',\r\n\t4: '#c1806c',\r\n\t5: '#43ae9e',\r\n\t6: '#866373',\r\n\t7: '#a2934c',\r\n\t8: '#8ca5a2',\r\n\t9: '#e7b714',\r\n}\r\n\r\nconst Container = styled.div<{ color: string; background: string }>`\r\n\tborder: 1px solid gray;\r\n\theight: 50px;\r\n\twidth: 100%;\r\n\tfont-size: 36px;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tfont-family: sans-serif;\r\n\t${({ color }) => `color: ${color}`};\r\n\t${({ background }) => `background: ${background}`};\r\n`\r\n\r\nconst Cell: React.FC<IProps> = ({ value, id }) => {\r\n\tconst { dispatch } = useContext(GameContext)\r\n\tconst [number, setNumber] = useState(0)\r\n\tconst initialRender = useRef(true)\r\n\tconst color = value ? '#e7e0e0' : 'black'\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!initialRender.current) {\r\n\t\t\tdispatch({ type: ActionType.UPDATE_BOARD, payload: { id, value: number } })\r\n\t\t}\r\n\t\tinitialRender.current = false\r\n\t}, [number, dispatch, id])\r\n\r\n\tconst handleWheel = (e: WheelEvent) => {\r\n\t\tif (e.deltaY < 0 && number < 9) {\r\n\t\t\tsetNumber(number + 1)\r\n\t\t}\r\n\r\n\t\tif (e.deltaY > 0 && number > 0) {\r\n\t\t\tsetNumber(number - 1)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleAnalyzeBoard = () => {\r\n\t\tif (!value && !number) {\r\n\t\t\tdispatch({ type: ActionType.ANALYZE_BOARD, payload: { id } })\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleClearHints = () => {\r\n\t\tif (!value) {\r\n\t\t\tdispatch({ type: ActionType.CLEAR_HINTS })\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container\r\n\t\t\tdata-testid='CELL_CONTAINER'\r\n\t\t\tcolor={color}\r\n\t\t\tbackground={CELL_COLORS[value || number]}\r\n\t\t\tonWheel={handleWheel as any}\r\n\t\t\tonMouseEnter={handleAnalyzeBoard}\r\n\t\t\tonMouseLeave={handleClearHints}\r\n\t\t>\r\n\t\t\t{value ? value : number !== 0 ? number : null}\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default Cell\r\n","import { Col, Row } from '../grid'\r\n\r\nimport Cell from '../components/Cell'\r\nimport { SectorValues } from '../model'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n\twidth: 150px;\r\n\tborder: 2px solid gray;\r\n`\r\n\r\ninterface IProps {\r\n\tvalues: SectorValues\r\n\tkeys: string[]\r\n}\r\n\r\nconst Sector: React.FC<IProps> = ({ values, keys }) => {\r\n\tconst renderCells = values.map((value, i) => {\r\n\t\treturn (\r\n\t\t\t<Col key={keys[i]} size={4}>\r\n\t\t\t\t<Cell id={keys[i]} value={value} />\r\n\t\t\t</Col>\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Row>{renderCells.slice(0, 3)}</Row>\r\n\t\t\t<Row>{renderCells.slice(3, 6)}</Row>\r\n\t\t\t<Row>{renderCells.slice(6)}</Row>\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default Sector\r\n","import { useContext, useState } from 'react'\r\n\r\nimport { ActionType } from '../model'\r\nimport { GameContext } from '../state/context'\r\nimport styled from 'styled-components'\r\n\r\nconst Text = styled.span`\r\n\tfont-family: sans-serif;\r\n\tcolor: #9e9e9e;\r\n\tmargin-right: 10px;\r\n`\r\n\r\nconst SelectWrapper = styled.div`\r\n\tdisplay: flex;\r\n\tmargin: 20px 0;\r\n\talign-items: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n\tpadding: 5px;\r\n\tbackground-color: transparent;\r\n\tfont-family: sans-serif;\r\n\tcolor: #9e9e9e;\r\n\tborder: 1px solid #9e9e9e;\r\n\tcursor: pointer;\r\n`\r\n\r\nconst Select = styled.select`\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid #9e9e9e;\r\n\tcolor: #9e9e9e;\r\n\tpadding: 5px;\r\n`\r\n\r\nconst Error = styled.p`\r\n\tfont-family: sans-serif;\r\n\tcolor: red;\r\n\tmargin-top: 30px;\r\n`\r\n\r\nconst SelectLevel = () => {\r\n\tconst { dispatch, isFetchingBoard, error } = useContext(GameContext)\r\n\tconst [level, setLevel] = useState('0.6')\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<SelectWrapper>\r\n\t\t\t\t<Text>Select level</Text>\r\n\t\t\t\t<Select onChange={(e) => setLevel(e.currentTarget.value)}>\r\n\t\t\t\t\t<option value='0.6'>very easy</option>\r\n\t\t\t\t\t<option value='0.5'>easy</option>\r\n\t\t\t\t\t<option value='0.4'>medium</option>\r\n\t\t\t\t\t<option value='0.3'>hard</option>\r\n\t\t\t\t\t<option value='0.2'>very hard</option>\r\n\t\t\t\t\t<option value='0.1'>killer</option>\r\n\t\t\t\t</Select>\r\n\t\t\t</SelectWrapper>\r\n\t\t\t<Button\r\n\t\t\t\tdisabled={isFetchingBoard}\r\n\t\t\t\tonClick={() => dispatch({ type: ActionType.SET_LEVEL, payload: { level } })}\r\n\t\t\t>\r\n\t\t\t\t{isFetchingBoard ? 'Loading...' : 'Start game'}\r\n\t\t\t</Button>\r\n\t\t\t{error && <Error>{error}</Error>}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SelectLevel\r\n","class Sectors {\r\n  sectors = [\r\n    ['00','01','02', '10','11','12', '20','21','22'],\r\n    ['03','04','05', '13','14','15', '23','24','25'],\r\n    ['06','07','08', '16','17','18', '26','27','28'],\r\n\r\n    ['30','31','32', '40','41','42', '50','51','52'],\r\n    ['33','34','35', '43','44','45', '53','54','55'],\r\n    ['36','37','38', '46','47','48', '56','57','58'],\r\n\r\n    ['60','61','62', '70','71','72', '80','81','82'],\r\n    ['63','64','65', '73','74','75', '83','84','85'],\r\n    ['66','67','68', '76','77','78', '86','87','88']\r\n  ]\r\n\r\n  getSectorItemCoords = (y: number, x: number): number[] => {\r\n    return this.sectors[y][x].split('').map((el) => +el)\r\n  }\r\n\r\n  getSectorById = (id: string) => {\r\n    return this.sectors.find((sector) => sector.includes(id))!\r\n  }\r\n\r\n  getSectorIndex = (id: string) => {\r\n    return this.sectors.indexOf(this.getSectorById(id))\r\n  }\r\n}\r\n\r\nexport const {\r\n  sectors,\r\n  getSectorById,\r\n  getSectorIndex,\r\n  getSectorItemCoords\r\n} = new Sectors()","import Hints from './Hints'\r\nimport Instructions from './Instructions'\r\nimport Reset from './Reset'\r\nimport { Row } from '../grid'\r\nimport Sector from './Sector'\r\nimport { SectorValues } from '../model'\r\nimport SelectLevel from './SelectLevel'\r\nimport { sectors } from '../services/Sectors'\r\nimport styled from 'styled-components'\r\n\r\ninterface IProps {\r\n\tdata: SectorValues[]\r\n}\r\n\r\nconst Container = styled.div`\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\theight: 100vh;\r\n\tflex-direction: column;\r\n\tbackground: #dbf4fc;\r\n`\r\n\r\nconst Game: React.FC<IProps> = ({ data }) => {\r\n\tconst renderSectors = data.map((sector, i) => {\r\n\t\treturn <Sector key={i} values={sector} keys={sectors[i]} />\r\n\t})\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t{data.length === 0 ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Instructions />\r\n\t\t\t\t\t<SelectLevel />\r\n\t\t\t\t</>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Hints />\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Row>{renderSectors.slice(0, 3)}</Row>\r\n\t\t\t\t\t\t<Row>{renderSectors.slice(3, 6)}</Row>\r\n\t\t\t\t\t\t<Row>{renderSectors.slice(6)}</Row>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Reset />\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default Game\r\n","export const deepCopy = (arr: any[]) => arr.map((sub) => sub.slice())","import { GameBoard } from '../model'\r\nimport { deepCopy } from '../helpers/deepCopy'\r\nimport { getSectorItemCoords } from './Sectors'\r\n\r\nclass Generator {\r\n\tmapBoradToSectors = (board: GameBoard) => {\r\n\t\tconst copy = deepCopy(board)\r\n\r\n\t\tcopy.forEach((row, y) =>\r\n\t\t\trow.forEach((_: any, x: number) => {\r\n\t\t\t\tconst [ver, hor] = getSectorItemCoords(y, x)\r\n\t\t\t\tcopy[ver][hor] = board[y][x]\r\n\t\t\t})\r\n\t\t)\r\n\r\n\t\treturn copy\r\n\t}\r\n}\r\n\r\nexport const { mapBoradToSectors } = new Generator()\r\n","export const getCoordsFromItem = (item: string) => item.split('').map((el) => +el)","import { GameBoard } from '../model'\r\nimport { deepCopy } from '../helpers/deepCopy'\r\nimport { getCoordsFromItem } from '../helpers/getCoordsFromItem'\r\nimport { getSectorIndex } from './Sectors'\r\nimport { mapBoradToSectors } from './Generator'\r\n\r\nclass Mechanics {\r\n\tanalyzeBoard = ({ id }: { id: string }, board: GameBoard) => {\r\n\t\tconst cache: (string | null)[] = []\r\n\t\tconst mapedBoard = mapBoradToSectors(board)\r\n\t\tconst currentSectorIndex = getSectorIndex(id)\r\n\t\tconst indices = [0, 1, 2, 3, 4, 5, 6, 7, 8]\r\n\t\tconst [row, col] = getCoordsFromItem(id)\r\n\r\n\t\tindices.forEach((i) => {\r\n\t\t\tconst rowValue = board[row][i]\r\n\t\t\tconst colValue = board[i][col]\r\n\t\t\tcache.push(rowValue, colValue)\r\n\t\t})\r\n\r\n\t\tconst test = [...cache, ...mapedBoard[currentSectorIndex]]\r\n\r\n\t\treturn [1, 2, 3, 4, 5, 6, 7, 8, 9].filter((el) => !test.includes(el.toString()))\r\n\t}\r\n\r\n\tupdateBoard = ({ id, value }: { id: string; value: number }, board: GameBoard) => {\r\n\t\tconst updatedBoard = deepCopy(board)\r\n\t\tconst [y, x] = getCoordsFromItem(id)\r\n\t\tupdatedBoard[y][x] = value!.toString()\r\n\t\treturn updatedBoard\r\n\t}\r\n}\r\n\r\nexport const { analyzeBoard, updateBoard } = new Mechanics()\r\n","import { Action, ActionType, IState } from '../model'\r\nimport { analyzeBoard, updateBoard } from '../services/Mechanics'\r\n\r\nimport { initialState } from '../containers/GlobalState'\r\n\r\nexport const reducer = (state: IState, action: Action): IState => {\r\n\tswitch (action.type) {\r\n\t\tcase ActionType.UPDATE_BOARD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tboard: updateBoard(action.payload, state.board),\r\n\t\t\t}\r\n\t\tcase ActionType.TOGGLE_HINTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tshowHints: !state.showHints,\r\n\t\t\t}\r\n\t\tcase ActionType.ANALYZE_BOARD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\thints: state.showHints ? analyzeBoard(action.payload, state.board) : [],\r\n\t\t\t}\r\n\t\tcase ActionType.CLEAR_HINTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\thints: [],\r\n\t\t\t}\r\n\t\tcase ActionType.SET_LEVEL:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tlevel: action.payload.level,\r\n\t\t\t\tisFetchingBoard: true,\r\n\t\t\t\terror: null,\r\n\t\t\t}\r\n\t\tcase ActionType.SET_BOARD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tboard: action.payload.data,\r\n\t\t\t\tisFetchingBoard: false,\r\n\t\t\t}\r\n\t\tcase ActionType.RESET_GAME:\r\n\t\t\treturn initialState\r\n\t\tcase ActionType.SET_ERROR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.payload.error,\r\n\t\t\t\tisFetchingBoard: false,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import { ActionType, SectorValues } from '../model'\r\nimport { useEffect, useMemo, useReducer } from 'react'\r\n\r\nimport { GameContext } from '../state/context'\r\nimport axios from 'axios'\r\nimport { mapBoradToSectors } from '../services/Generator'\r\nimport { reducer } from '../state/reducers'\r\n\r\ninterface IProps {\r\n\trender: (data: SectorValues[]) => JSX.Element\r\n}\r\n\r\nexport const initialState = {\r\n\tlevel: null,\r\n\tboard: [],\r\n\tshowHints: false,\r\n\thints: [],\r\n\tisFetchingBoard: false,\r\n\terror: null,\r\n}\r\n\r\nconst GlobalState: React.FC<IProps> = ({ render }) => {\r\n\tconst [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n\tuseEffect(() => {\r\n\t\tstate.level &&\r\n\t\t\taxios\r\n\t\t\t\t.get('/api', { params: { level: state.level } })\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tdispatch({ type: ActionType.SET_BOARD, payload: { data: res.data } })\r\n\t\t\t\t})\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: ActionType.SET_ERROR,\r\n\t\t\t\t\t\tpayload: { error: 'Sorry, but an api error happend. Try again or refresh page.' },\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t}, [state.level])\r\n\r\n\tconst contextValue = {\r\n\t\tshowHints: state.showHints,\r\n\t\thints: state.hints,\r\n\t\tdispatch,\r\n\t\tisFetchingBoard: state.isFetchingBoard,\r\n\t\terror: state.error,\r\n\t}\r\n\r\n\tconst initilalBoard = useMemo(() => mapBoradToSectors(state.board), [state.board.length])\r\n\r\n\treturn (\r\n\t\t<GameContext.Provider value={contextValue}>\r\n\t\t\t{render(initilalBoard as SectorValues[])}\r\n\t\t</GameContext.Provider>\r\n\t)\r\n}\r\n\r\nexport default GlobalState\r\n","import Game from './containers/Game'\r\nimport GlobalState from './containers/GlobalState'\r\nimport { SectorValues } from './model'\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst StyleReset = createGlobalStyle`\r\n  * {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  box-sizing: border-box;\r\n}`\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<StyleReset />\r\n\t\t\t<GlobalState render={(data: SectorValues[]) => <Game data={data} />} />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<StrictMode>\n\t\t<App />\n\t</StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}